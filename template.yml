AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  AWS SAM project to deploy a CDN for hosting static assets in private S3 buckets

Parameters:
  DomainName:
    Type: String
    Description: Domain name to use
  HostedZoneId:
    Type: 'AWS::Route53::HostedZone::Id'
    Description: HostedZoneId for the Domain
  ApiPath:
    Type: String
    Default: '/api'
    Description: URI path to route to API
  ApiOriginDomainName:
    Type: String
    Default: 'api.<domain>'
    Description: API origin domain name
  ApiOriginPath:
    Type: String
    Default: '/'
    Description: API origin path
  ApiOriginKey:
    Type: String
    Default: ''
    Description: x-api-key HTTP request header sent to API
  CreateRedirect:
    Type: String
    Default: 'true'
    Description: Set to 'false' to not create the redirect CloudFront distribution

Conditions:
  CreateRedirect: !Not [!Equals [!Ref CreateRedirect, 'false']]

Resources:
  CloudFrontLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
                - 'edgelambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  DefaultIndexLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: src/handlers/default_index/
      Handler: index.handler
      Runtime: nodejs10.x
      Role: !GetAtt CloudFrontLambdaRole.Arn
      MemorySize: 128 # megabytes
      Timeout: 1 # secondes
      Description: CloudFront origin-request default index handler

  WebSecurityLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: src/handlers/web_security/
      Handler: index.handler
      Runtime: nodejs10.x
      Role: !GetAtt CloudFrontLambdaRole.Arn
      MemorySize: 128 # megabytes
      Timeout: 1 # secondes
      Description: CloudFront origin-response web security handler

  WebCertificate:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Ref DomainName
      SubjectAlternativeNames:
        - !Sub '*.${DomainName}'
      ValidationMethod: DNS
      Tags:
        - Key: Name
          Value: !Ref DomainName

  LogBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Logs'

  WebBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Ref DomainName
      LoggingConfiguration:
        DestinationBucketName: !Ref LogBucket
        LogFilePrefix: 'S3/'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Web'

  WebBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref: WebBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${WebBucket}/*'

  RedirectBucket:
    Type: 'AWS::S3::Bucket'
    Condition: CreateRedirect
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Ref: WebBucket
          Protocol: https
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Redirect'

  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        CacheBehaviors:
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            Compress: true
            ForwardedValues:
              Headers:
                - Accept
                - Authorization
                - Content-Type
                - Referer
              QueryString: true
            MaxTTL: 0
            MinTTL: 0
            DefaultTTL: 0
            PathPattern: !Sub '${ApiPath}*'
            TargetOriginId: api
            ViewerProtocolPolicy: https-only
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: '/index.html'
          - ErrorCachingMinTTL: 0
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: '/index.html'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: 'origin-request'
              LambdaFunctionARN: !GetAtt DefaultIndexLambdaFunction.FunctionArn
            - EventType: 'origin-response'
              LambdaFunctionARN: !GetAtt WebSecurityLambdaFunction.FunctionArn
        DefaultRootObject: 'index.html'
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Logging:
          Bucket: !GetAtt LogBucket.DomainName
          IncludeCookies: false
          Prefix: 'CloudFront/'
        Origins:
          - Id: api
            DomainName: !Ref ApiOriginDomainName
            OriginPath: !Ref ApiOriginPath
            OriginCustomHeaders:
              - HeaderName: 'x-api-key'
                HeaderValue: !Ref ApiOriginKey
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - 'TLSv1.2'
          - Id: s3
            DomainName: !GetAtt WebBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref WebCertificate
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only

  RedirectCloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Condition: CreateRedirect
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub 'www.${DomainName}'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - Id: s3
            DomainName: !Sub '${RedirectBucket}.s3-website-${AWS::Region}.amazonaws.com'
            CustomOriginConfig:
              OriginProtocolPolicy: http-only # private bucket access only works over HTTP
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref WebCertificate
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'CloudFront OAI'

  WebRecordSet:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A

  WebIPV6RecordSet:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: AAAA

  RedirectRecordSet:
    Type: 'AWS::Route53::RecordSet'
    Condition: CreateRedirect
    Properties:
      AliasTarget:
        DNSName: !GetAtt RedirectCloudFrontDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub 'www.${DomainName}'
      Type: A

  RedirectIPV6RecordSet:
    Type: 'AWS::Route53::RecordSet'
    Condition: CreateRedirect
    Properties:
      AliasTarget:
        DNSName: !GetAtt RedirectCloudFrontDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub 'www.${DomainName}'
      Type: AAAA
